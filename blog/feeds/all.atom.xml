<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>網際內容管理系統</title><link href="./" rel="alternate"></link><link href="./feeds/all.atom.xml" rel="self"></link><id>./</id><updated>2024-06-20T03:59:37+08:00</updated><entry><title>2024 Spring 課程</title><link href="./2024-Spring-w1-blog-tutorial.html" rel="alternate"></link><published>2024-02-18T11:00:00+08:00</published><updated>2024-06-17T15:47:07+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-02-18:./2024-Spring-w1-blog-tutorial.html</id><summary type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;


&lt;h1&gt;內容管理系統&lt;/h1&gt;
&lt;p&gt;使用者可以自行利用 &lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;cmsimde_site&lt;/a&gt; 倉儲作為 Template, 建立自己的網站內容管理系統.&lt;/p&gt;
&lt;p&gt;引用網站網址連結的方法:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;cmsimde_site&lt;/a&gt; - 在文章中多次引用同一個網站連結時, 可以使用此種方法.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;https://github.com/mdecycu/cmsimde_site&lt;/a&gt; - 假如想要快速將網址套用 html 網站連結, 可以使用此種方法.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;cmsimde_site&lt;/a&gt; - 也可以使用 Markdown 的標準網站連結使用格式.&lt;/p&gt;
&lt;pre class="brush: python"&gt;
# 引用 Python 程式的方法
for i in range(10):
    print(i, "列出字串")
&lt;/pre&gt;

&lt;p&gt;也可以直接在 .md 檔案中使用 html 標註, 或加入 Javascript 或 Brython 程式碼.&lt;/p&gt;
&lt;p&gt;從 1 累加到 100:&lt;/p&gt;
&lt;p&gt;&lt;button id="add1to100"&gt;1 add to 100&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;將 iterable 與 iterator &lt;a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438"&gt;相關說明&lt;/a&gt;, 利用 Brython 與 Ace Editor 整理在這個頁面.&lt;/p&gt;
&lt;!-- 導入 brython 程式庫 --&gt;
&lt;p&gt;
&lt;script src="./../cmsimde/static/brython.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/brython_stdlib.js"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;!-- 啟動 Brython --&gt;
&lt;p&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 導入 FileSaver 與 filereader --&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script src="./../cmsimde/static/ace/FileSaver.min.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/filereader.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 導入 ace --&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script src="./../cmsimde/static/ace/ace.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/ext-language_tools.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/mode-python3.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/snippets/python.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 --&gt;
&lt;script src="./../cmsimde/static/Cango-24v03-min.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/gearUtils-09.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/SVGpathUtils-6v03-min.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/sylvester.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/PrairieDraw.js"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/javascript"&gt;
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 開始 --&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 結束--&gt;&lt;/p&gt;
&lt;!-- editor1 開始 --&gt;
&lt;p&gt;&lt;!-- 用來顯示程式碼的 editor 區域 --&gt;&lt;/p&gt;
&lt;div id="kw_editor1" style="width: 600px; height: 300px;"&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 存擋表單開始 --&gt;&lt;/p&gt;
&lt;form&gt;&lt;label&gt;Filename: &lt;input id="kw_filename" placeholder="input file name" type="text"/&gt;.py&lt;/label&gt; &lt;input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/&gt;&lt;/form&gt;
&lt;p&gt;&lt;!-- 存擋表單結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕開始 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;button id="kw_run1"&gt;Run&lt;/button&gt; &lt;button id="kw_show_console1"&gt;Output&lt;/button&gt; &lt;button id="kw_clear_console1"&gt;清除輸出區&lt;/button&gt;&lt;button id="clear_bd1"&gt;清除繪圖區&lt;/button&gt;&lt;button onclick="window.location.reload()"&gt;Reload&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 程式執行 ouput 區 --&gt;&lt;/p&gt;
&lt;div style="width: 100%; height: 100%;"&gt;&lt;textarea autocomplete="off" id="kw_console1"&gt;&lt;/textarea&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --&gt;&lt;/p&gt;
&lt;div id="brython_div1"&gt;&lt;/div&gt;
&lt;!-- editor1 結束 --&gt;
&lt;hr/&gt;&lt;!-- ########################################## --&gt;&lt;p&gt;從 1 累加到 100 part2:&lt;/p&gt;
&lt;p&gt;&lt;button id="add1to100part2"&gt;1 add to 100&lt;/button&gt;&lt;button id="cango_three_gears"&gt;cango_three_gears&lt;/button&gt;&lt;button id="bsnake"&gt;BSnake&lt;/button&gt;&lt;button id="aitetris"&gt;AI Tetris&lt;/button&gt;&lt;button id="threejsblock"&gt;Rotating Block&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 part2 開始 --&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 part2 結束--&gt;&lt;/p&gt;
&lt;!-- editor2 開始 --&gt;
&lt;p&gt;&lt;!-- 用來顯示程式碼的 editor 區域 --&gt;&lt;/p&gt;
&lt;div id="kw_editor2" style="width: 600px; height: 300px;"&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 存擋表單開始 --&gt;&lt;/p&gt;
&lt;form&gt;&lt;label&gt;Filename: &lt;input id="kw_filename2" placeholder="input file name" type="text"/&gt;.py&lt;/label&gt; &lt;input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/&gt;&lt;/form&gt;
&lt;p&gt;&lt;!-- 存擋表單結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕開始 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;button id="kw_run2"&gt;Run&lt;/button&gt; &lt;button id="kw_show_console2"&gt;Output&lt;/button&gt; &lt;button id="kw_clear_console2"&gt;清除輸出區&lt;/button&gt;&lt;button id="clear_bd2"&gt;清除繪圖區&lt;/button&gt;&lt;button onclick="window.location.reload()"&gt;Reload&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 程式執行 ouput 區 --&gt;&lt;/p&gt;
&lt;div style="width: 100%; height: 100%;"&gt;&lt;textarea autocomplete="off" id="kw_console2"&gt;&lt;/textarea&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --&gt;&lt;/p&gt;
&lt;div id="brython_div2"&gt;&lt;/div&gt;
&lt;!-- editor2 結束 --&gt;
&lt;hr/&gt;&lt;p&gt;
&lt;script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"&gt;&lt;/script&gt;</content><category term="Spring"></category><category term="網誌編寫"></category></entry><entry><title>w10</title><link href="./w10.html" rel="alternate"></link><published>2024-02-18T11:00:00+08:00</published><updated>2024-06-20T03:59:37+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-02-18:./w10.html</id><summary type="html">&lt;h2&gt;w10&lt;/h2&gt;
&lt;p&gt;以replit來維護新的分組倉儲，需要應對問題為replit的.shh協定無法供免費使用者使用，已經透過github系統設定，現在可以直接在replit進行分組維護，&lt;/p&gt;
&lt;p&gt;replit目前只剩下對於使用者的總資料儲存量(10G)限制，當資源存取超過上限時，需要回到github下的對應倉儲帳號進行對應手段。&lt;/p&gt;
&lt;p&gt;新的分組專案 …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;w10&lt;/h2&gt;
&lt;p&gt;以replit來維護新的分組倉儲，需要應對問題為replit的.shh協定無法供免費使用者使用，已經透過github系統設定，現在可以直接在replit進行分組維護，&lt;/p&gt;
&lt;p&gt;replit目前只剩下對於使用者的總資料儲存量(10G)限制，當資源存取超過上限時，需要回到github下的對應倉儲帳號進行對應手段。&lt;/p&gt;
&lt;p&gt;新的分組專案網站：https://github.com/mdewcm2024/1astud-site&lt;/p&gt;</content><category term="w10"></category><category term="網誌編寫"></category></entry><entry><title>w13</title><link href="./w13.html" rel="alternate"></link><published>2024-02-18T11:00:00+08:00</published><updated>2024-06-20T03:49:25+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-02-18:./w13.html</id><content type="html">&lt;h2&gt;w13&lt;/h2&gt;
&lt;p&gt;1.從教務處主機直接擷取資料&lt;/p&gt;
&lt;p&gt;2.將擷取下來的資料以近端形式持續保留在頁面&lt;/p&gt;
&lt;p&gt;3.猜數字遊戲&lt;/p&gt;</content><category term="w13"></category><category term="網誌編寫"></category></entry><entry><title>w3</title><link href="./w3.html" rel="alternate"></link><published>2024-02-18T11:00:00+08:00</published><updated>2024-06-17T15:47:46+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-02-18:./w3.html</id><content type="html">&lt;h2&gt;W3&lt;/h2&gt;
&lt;p&gt;常用的 git 指令
2.利用 Gitpod 維護倉儲&lt;/p&gt;
&lt;p&gt;3.利用 localhost 維護倉儲&lt;/p&gt;
&lt;p&gt;4.利用 Wink 建立操作影片&lt;/p&gt;</content><category term="w3"></category><category term="網誌編寫"></category></entry><entry><title>w4</title><link href="./w4.html" rel="alternate"></link><published>2024-02-18T11:00:00+08:00</published><updated>2024-06-20T03:25:10+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-02-18:./w4.html</id><summary type="html">&lt;h2&gt;W4&lt;/h2&gt;
&lt;p&gt;1.複習W3上課內容。&lt;/p&gt;
&lt;p&gt;2.Replit 靜態網站檢視下載 main2.txt 與 static.txt, 其中包含 main2.py 與 static.py若要執行動態網站，可以在 Shell 執行 python3 main.py 或者使用 Replit 的 Run 按鍵.&lt;/p&gt;
&lt;p&gt;3.使用 …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;W4&lt;/h2&gt;
&lt;p&gt;1.複習W3上課內容。&lt;/p&gt;
&lt;p&gt;2.Replit 靜態網站檢視下載 main2.txt 與 static.txt, 其中包含 main2.py 與 static.py若要執行動態網站，可以在 Shell 執行 python3 main.py 或者使用 Replit 的 Run 按鍵.&lt;/p&gt;
&lt;p&gt;3.使用replit Codespaces Gitpod三種網頁維護 執行動態和靜態網站和設定存取權。&lt;/p&gt;
&lt;p&gt;4.使用Replit 建立分組倉儲權限,由於 Replit 上的免費帳號僅允許與一個 Github 帳號對應,必須自行在 /home/runner/.ssh 目錄下建立 id_rsa 與 config(.ssh-keygen)&lt;/p&gt;
&lt;p&gt;5.下載miktex-portable.7z，期中期末需要LaTeX建立各組的報告&lt;/p&gt;</content><category term="w4"></category><category term="網誌編寫"></category></entry><entry><title>w5</title><link href="./w5.html" rel="alternate"></link><published>2024-02-18T11:00:00+08:00</published><updated>2024-06-20T03:33:28+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-02-18:./w5.html</id><content type="html">&lt;h2&gt;W5&lt;/h2&gt;
&lt;p&gt;1.Replit分組平台倉儲設定。&lt;/p&gt;
&lt;p&gt;2.使用可攜檔裡的Putty-solvespace.exe(STL)，零件檢視方法。&lt;/p&gt;
&lt;p&gt;3.使用近端可攜程式，維護更新自己及分組倉儲。&lt;/p&gt;</content><category term="w5"></category><category term="網誌編寫"></category></entry><entry><title>w6</title><link href="./w6.html" rel="alternate"></link><published>2024-02-18T11:00:00+08:00</published><updated>2024-06-20T03:42:23+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-02-18:./w6.html</id><summary type="html">&lt;h2&gt;W6&lt;/h2&gt;
&lt;p&gt;GitHub 的發展歷史如下：&lt;/p&gt;
&lt;p&gt;GitHub 於 2008 年由 Tom Preston-Werner、Chris Wanstrath 和 PJ Hyett 共同創立。他們希望為開發者社群提供一個方便、易於使用的代碼托管 …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;W6&lt;/h2&gt;
&lt;p&gt;GitHub 的發展歷史如下：&lt;/p&gt;
&lt;p&gt;GitHub 於 2008 年由 Tom Preston-Werner、Chris Wanstrath 和 PJ Hyett 共同創立。他們希望為開發者社群提供一個方便、易於使用的代碼托管平台。&lt;/p&gt;
&lt;p&gt;2008 年 4 月，GitHub 開始運營，提供基於 Git 的代碼托管服務。它快速吸引了許多開發者和開源項目，成為了開源社區的中心之一。&lt;/p&gt;
&lt;p&gt;隨著時間的推移，GitHub 提供了越來越多的功能，包括問題跟踪、代碼審查、Wiki 等，使其成為開發團隊協作的理想選擇。&lt;/p&gt;
&lt;p&gt;2018 年，Microsoft 宣布收購 GitHub，但 GitHub 仍然保持獨立運營，並致力於為開發者社群提供更好的服務。&lt;/p&gt;
&lt;p&gt;GitHub 的成功不僅在於它提供了優秀的技術平台，還在於它建立了一個強大的開發者社群，促進了開源文化的發展和分享知識的精神。&lt;/p&gt;
&lt;p&gt;github創作人的相關履歷:
GitHub 的創始人之一是 Tom Preston-Werner。他在 2008 年共同創立了 GitHub，是這個平台的主要推動者之一。以下是 Tom Preston-Werner 的相關履歷：&lt;/p&gt;
&lt;p&gt;Tom Preston-Werner 在程序員社群中享有很高的聲譽。他以開放源碼項目為主，是 Ruby 社群中知名的成員之一。&lt;/p&gt;
&lt;p&gt;他曾是 GitHub 的首席技術官（CTO），負責制定技術方針和平台架構。他對於 GitHub 平台的成功和技術發展貢獻良多。&lt;/p&gt;
&lt;p&gt;在創立 GitHub 之前，Tom Preston-Werner 還參與過多個開源項目的開發和維護工作，他的開源貢獻為他贏得了廣泛的尊重和讚譽。&lt;/p&gt;
&lt;p&gt;雖然 Tom Preston-Werner 在 2014 年離開了 GitHub，但他的貢獻對於 GitHub 和開發者社群的發展影響深遠。&lt;/p&gt;
&lt;p&gt;一般同一專業領域的人士可以利用 Git 解決內容管理問題的方式包括：&lt;/p&gt;
&lt;p&gt;版本控制：使用 Git 跟踪文件的每一次變化，能夠輕鬆地比較不同版本之間的差異，從而更好地管理和維護專案的內容。&lt;/p&gt;
&lt;p&gt;協作開發：多人協作開發時，可以利用 Git 的分支（branch）功能讓不同的團隊成員同時進行獨立的工作，最後再將各自的修改合併（merge）到主分支，從而實現高效率的協作開發。&lt;/p&gt;
&lt;p&gt;版本回溯：當出現錯誤或需要回復到之前的某個版本時，可以利用 Git 輕鬆地回溯到過去的任何一個提交點，進行修復或恢復。&lt;/p&gt;
&lt;p&gt;代碼審查：通過 Git 提交的每一個變更都可以進行代碼審查，有助於發現潛在的問題並提出改進建議，從而提高代碼的質量和穩定性。&lt;/p&gt;
&lt;p&gt;分支管理：利用 Git 可以方便地管理不同的功能分支、bug 修復分支等，從而更好地組織和規劃專案的開發進度。&lt;/p&gt;
&lt;p&gt;遠程協作：通過將專案代碼托管到遠程 Git 服務（如 GitHub、GitLab、Bitbucket 等），可以實現跨地區或跨團隊的協作開發，並提供安全的備份和存儲。&lt;/p&gt;
&lt;p&gt;總的來說，Git 提供了豐富的功能和工具，能夠有效地解決內容管理問題，提高團隊協作效率，並確保專案的可追溯性和穩定性。&lt;/p&gt;
&lt;p&gt;在 Windows 上進行 Git 客戶端（client）和 Git 服務器（server）的實際演示，可以按照以下步驟進行：
設置 Git 服務器：
安裝 Git：首先在適當的位置下載並安裝 Git，你可以從 Git 官方網站 下載 Windows 版本的 Git 安裝程式。&lt;/p&gt;
&lt;p&gt;初始化 Git 儲存庫：在你希望作為 Git 服務器的文件夾中初始化一個空的 Git 儲存庫。你可以使用命令行或 Git 圖形用戶界面（GUI）工具來執行這一步驟。&lt;/p&gt;
&lt;p&gt;git init --bare myrepo.git
啟動 Git 服務器：使用 Git 命令啟動 Git 服務器。&lt;/p&gt;
&lt;p&gt;git daemon --reuseaddr --base-path=. --export-all --verbose --enable=receive-pack
設置 Git 客戶端：
安裝 Git：在你的 Windows 機器上安裝 Git，可以使用與上述相同的安裝程式。&lt;/p&gt;
&lt;p&gt;克隆儲存庫：使用 Git 客戶端，克隆剛剛初始化的 Git 儲存庫到你的本地計算機上。&lt;/p&gt;
&lt;p&gt;git clone git://your-server-ip/myrepo.git
進行演示：
在 Git 客戶端進行一些更改，例如添加新文件、修改現有文件等。&lt;/p&gt;
&lt;p&gt;使用 Git 客戶端將這些更改提交到本地儲存庫。&lt;/p&gt;
&lt;p&gt;git add . git commit -m "Commit message"
將本地更改推送（push）到 Git 服務器。&lt;/p&gt;
&lt;p&gt;git push origin master
在 Git 服務器端，可以使用 Git 工具或任何文字編輯器檢查提交的更改。&lt;/p&gt;
&lt;p&gt;這樣就完成了在 Windows 上進行 Git 客戶端和 Git 服務器的實際演示。這個過程可以讓你了解 Git 在團隊協作中的基本運作方式。&lt;/p&gt;</content><category term="w6"></category><category term="網誌編寫"></category></entry><entry><title>w7w8</title><link href="./w7w8.html" rel="alternate"></link><published>2024-02-18T11:00:00+08:00</published><updated>2024-06-20T03:47:03+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-02-18:./w7w8.html</id><content type="html">&lt;h2&gt;w7w8&lt;/h2&gt;
&lt;p&gt;1.課程介紹教育的理念本質。&lt;/p&gt;
&lt;p&gt;2.影片嵌入網站方法。&lt;/p&gt;</content><category term="w7w8"></category><category term="網誌編寫"></category></entry><entry><title>期中重點</title><link href="./%E6%9C%9F%E4%B8%AD%E9%87%8D%E9%BB%9E.html" rel="alternate"></link><published>2024-02-18T11:00:00+08:00</published><updated>2024-06-20T03:52:32+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-02-18:./期中重點.html</id><summary type="html">&lt;h2&gt;期中重點&lt;/h2&gt;
&lt;p&gt;網頁式內容管理&lt;/p&gt;
&lt;p&gt;目前無論是 Github 的 Codespaces, Gitpod 或 Replit 都讓使用者可以直接在網頁瀏覽器中維護網站內容. 其中 Replit 還提供 …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;期中重點&lt;/h2&gt;
&lt;p&gt;網頁式內容管理&lt;/p&gt;
&lt;p&gt;目前無論是 Github 的 Codespaces, Gitpod 或 Replit 都讓使用者可以直接在網頁瀏覽器中維護網站內容. 其中 Replit 還提供手機 App 讓使用者透過手機或平板管理網頁內容.網際內容管理課程將網頁內容管理系統與網頁資料放在同一個倉儲中, 且讓使用者寄存在 Github 中, 只要能夠執行 Python 的雲端或近端環境都能開啟網頁編輯程式進行改版, 而編輯完成的網頁資料則可在 Github 倉儲中透過 Pages 的全球資訊網伺服器功能呈現網站內容.網際內容管理課程所採用的管理系統採用 Python Flask 編寫, 其中除了章節式的網頁內容採超文件的 H 標註進行分頁外, 還導入 Pelican 與 Reveal.js 等兩個延伸套件, 其中 Pelican 可用來建立網誌, 而 Reveal.js 則可用來建立網頁上的簡報資料.&lt;/p&gt;
&lt;p&gt;Python 程式系統
Python 程式系統是指使用 Python 程式語言開發的軟體系統。Python 是一種高級、通用、直譯式的程式語言，具有簡潔易讀的語法和強大的擴展性，廣泛應用於軟體開發、數據分析、科學計算、網站開發等各個領域。可用Python開發各種程式, 或與其他 Windows 應用套件結合使用, 例如: 與 CoppeliaSim 機器人模擬場景結合, 建立機電控制系統, 或與 Siemens NX 的 API 延伸程式結合應用.
網頁上的 IDE
IDE（整合開發環境）是一種讓開發者可以在瀏覽器中進行程式碼編輯、調試和執行的工具。這樣的IDE通常具有以下特點：&lt;/p&gt;
&lt;p&gt;線上編輯器：允許在瀏覽器中直接編輯程式碼，並提供語法高亮、自動完成等功能。&lt;/p&gt;
&lt;p&gt;多語言支援：能夠編輯和執行多種程式語言，如JavaScript、HTML、CSS、Python等。&lt;/p&gt;
&lt;p&gt;調試功能：提供調試工具，如斷點設置、變數監視等，方便開發者進行程式碼調試。&lt;/p&gt;
&lt;p&gt;項目管理：允許開發者在線上管理項目，包括文件管理、項目結構視圖等。&lt;/p&gt;
&lt;p&gt;版本控制整合：與版本控制系統（如Git）整合，使得開發者能夠方便地管理代碼版本。&lt;/p&gt;
&lt;p&gt;即時預覽：能夠即時預覽網頁、應用程式等的運行結果。&lt;/p&gt;
&lt;p&gt;協作功能：支援多人協作開發，允許多個開發者同時編輯同一份程式碼，並提供即時通訊功能。&lt;/p&gt;
&lt;p&gt;AI 工具
AI工具是指利用機器學習、深度學習、自然語言處理等技術開發的應用程式，用於解決各種問題或執行特定任務。這些工具可以應用於多個領域，包括但不限於自然語言處理、圖像處理、機器學習模型訓練、數據分析等。以下是一些常見的AI工具：&lt;/p&gt;
&lt;p&gt;Scikit-learn：基於Python的機器學習庫，提供了各種機器學習算法的實現，包括分類、回歸、聚類等。&lt;/p&gt;
&lt;p&gt;ChatGPT 是一個基於 OpenAI 的語言模型，具有多種功能，可以幫助用戶進行對話、提供信息、創作文本等。&lt;/p&gt;</content><category term="期中重點"></category><category term="網誌編寫"></category></entry></feed>