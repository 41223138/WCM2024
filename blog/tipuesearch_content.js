var tipuesearch = {"pages":[{"title":"About","text":"cmsimde 內容管理系統 倉儲: https://github.com/mdecycu/cmsimde_site 網站: https://mde.tw/cmsimde_site/ 簡報: https://mde.tw/cmsimde_site/reveal 網誌: https://mde.tw/cmsimde_site/blog","tags":"misc","url":"./pages/about/"},{"title":"2024 Spring 課程","text":"2024 Spring 網際內容管理與協同產品設計實習課程教學導引. 內容管理系統 使用者可以自行利用 cmsimde_site 倉儲作為 Template, 建立自己的網站內容管理系統. 引用網站網址連結的方法: cmsimde_site - 在文章中多次引用同一個網站連結時, 可以使用此種方法. https://github.com/mdecycu/cmsimde_site - 假如想要快速將網址套用 html 網站連結, 可以使用此種方法. cmsimde_site - 也可以使用 Markdown 的標準網站連結使用格式. # 引用 Python 程式的方法 for i in range(10): print(i, \"列出字串\") 也可以直接在 .md 檔案中使用 html 標註, 或加入 Javascript 或 Brython 程式碼. 從 1 累加到 100: 1 add to 100 將 iterable 與 iterator 相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. Filename: .py Run Output 清除輸出區 清除繪圖區 Reload 從 1 累加到 100 part2: 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block Filename: .py Run Output 清除輸出區 清除繪圖區 Reload","tags":"Spring","url":"./2024-Spring-w1-blog-tutorial.html"},{"title":"w3","text":"W3 常用的 git 指令 2.利用 Gitpod 維護倉儲 3.利用 localhost 維護倉儲 4.利用 Wink 建立操作影片","tags":"w3","url":"./w3.html"},{"title":"w4","text":"W4 1.複習W3上課內容。 2.Replit 靜態網站檢視下載 main2.txt 與 static.txt, 其中包含 main2.py 與 static.py若要執行動態網站，可以在 Shell 執行 python3 main.py 或者使用 Replit 的 Run 按鍵. 3.使用replit Codespaces Gitpod三種網頁維護 執行動態和靜態網站和設定存取權。 4.使用Replit 建立分組倉儲權限,由於 Replit 上的免費帳號僅允許與一個 Github 帳號對應,必須自行在 /home/runner/.ssh 目錄下建立 id_rsa 與 config(.ssh-keygen) 5.下載miktex-portable.7z，期中期末需要LaTeX建立各組的報告","tags":"w4","url":"./w4.html"},{"title":"w5","text":"W5 1.Replit分組平台倉儲設定。 2.使用可攜檔裡的Putty-solvespace.exe(STL)，零件檢視方法。 3.使用近端可攜程式，維護更新自己及分組倉儲。","tags":"w5","url":"./w5.html"},{"title":"w6","text":"W6 GitHub 的發展歷史如下： GitHub 於 2008 年由 Tom Preston-Werner、Chris Wanstrath 和 PJ Hyett 共同創立。他們希望為開發者社群提供一個方便、易於使用的代碼托管平台。 2008 年 4 月，GitHub 開始運營，提供基於 Git 的代碼托管服務。它快速吸引了許多開發者和開源項目，成為了開源社區的中心之一。 隨著時間的推移，GitHub 提供了越來越多的功能，包括問題跟踪、代碼審查、Wiki 等，使其成為開發團隊協作的理想選擇。 2018 年，Microsoft 宣布收購 GitHub，但 GitHub 仍然保持獨立運營，並致力於為開發者社群提供更好的服務。 GitHub 的成功不僅在於它提供了優秀的技術平台，還在於它建立了一個強大的開發者社群，促進了開源文化的發展和分享知識的精神。 github創作人的相關履歷: GitHub 的創始人之一是 Tom Preston-Werner。他在 2008 年共同創立了 GitHub，是這個平台的主要推動者之一。以下是 Tom Preston-Werner 的相關履歷： Tom Preston-Werner 在程序員社群中享有很高的聲譽。他以開放源碼項目為主，是 Ruby 社群中知名的成員之一。 他曾是 GitHub 的首席技術官（CTO），負責制定技術方針和平台架構。他對於 GitHub 平台的成功和技術發展貢獻良多。 在創立 GitHub 之前，Tom Preston-Werner 還參與過多個開源項目的開發和維護工作，他的開源貢獻為他贏得了廣泛的尊重和讚譽。 雖然 Tom Preston-Werner 在 2014 年離開了 GitHub，但他的貢獻對於 GitHub 和開發者社群的發展影響深遠。 一般同一專業領域的人士可以利用 Git 解決內容管理問題的方式包括： 版本控制：使用 Git 跟踪文件的每一次變化，能夠輕鬆地比較不同版本之間的差異，從而更好地管理和維護專案的內容。 協作開發：多人協作開發時，可以利用 Git 的分支（branch）功能讓不同的團隊成員同時進行獨立的工作，最後再將各自的修改合併（merge）到主分支，從而實現高效率的協作開發。 版本回溯：當出現錯誤或需要回復到之前的某個版本時，可以利用 Git 輕鬆地回溯到過去的任何一個提交點，進行修復或恢復。 代碼審查：通過 Git 提交的每一個變更都可以進行代碼審查，有助於發現潛在的問題並提出改進建議，從而提高代碼的質量和穩定性。 分支管理：利用 Git 可以方便地管理不同的功能分支、bug 修復分支等，從而更好地組織和規劃專案的開發進度。 遠程協作：通過將專案代碼托管到遠程 Git 服務（如 GitHub、GitLab、Bitbucket 等），可以實現跨地區或跨團隊的協作開發，並提供安全的備份和存儲。 總的來說，Git 提供了豐富的功能和工具，能夠有效地解決內容管理問題，提高團隊協作效率，並確保專案的可追溯性和穩定性。 在 Windows 上進行 Git 客戶端（client）和 Git 服務器（server）的實際演示，可以按照以下步驟進行： 設置 Git 服務器： 安裝 Git：首先在適當的位置下載並安裝 Git，你可以從 Git 官方網站 下載 Windows 版本的 Git 安裝程式。 初始化 Git 儲存庫：在你希望作為 Git 服務器的文件夾中初始化一個空的 Git 儲存庫。你可以使用命令行或 Git 圖形用戶界面（GUI）工具來執行這一步驟。 git init --bare myrepo.git 啟動 Git 服務器：使用 Git 命令啟動 Git 服務器。 git daemon --reuseaddr --base-path=. --export-all --verbose --enable=receive-pack 設置 Git 客戶端： 安裝 Git：在你的 Windows 機器上安裝 Git，可以使用與上述相同的安裝程式。 克隆儲存庫：使用 Git 客戶端，克隆剛剛初始化的 Git 儲存庫到你的本地計算機上。 git clone git://your-server-ip/myrepo.git 進行演示： 在 Git 客戶端進行一些更改，例如添加新文件、修改現有文件等。 使用 Git 客戶端將這些更改提交到本地儲存庫。 git add . git commit -m \"Commit message\" 將本地更改推送（push）到 Git 服務器。 git push origin master 在 Git 服務器端，可以使用 Git 工具或任何文字編輯器檢查提交的更改。 這樣就完成了在 Windows 上進行 Git 客戶端和 Git 服務器的實際演示。這個過程可以讓你了解 Git 在團隊協作中的基本運作方式。","tags":"w6","url":"./w6.html"},{"title":"w7w8","text":"w7w8 1.課程介紹教育的理念本質。 2.影片嵌入網站方法。","tags":"w7w8","url":"./w7w8.html"}]};